[
  {
    "commit": "5dbf589e26f1242f470057eec0956af777c97f72",
    "timestamp": "2025-09-18T17:51:18Z",
    "request": "Активирай автоматичния журнал и запиши първия му запис за проследяване на задачите.",
    "summary": "Въведена е автоматична система за генерация на журнал и начални данни.",
    "reason": "Нуждаем се от устойчив процес за документиране на комитите и анализ на засегнатите файлове.",
    "notes": {
      "docs/change-log-data.json": "JSON източник с първия запис в журнала (пример: commit 65fe4750).",
      "docs/change-log.md": "Генериран Markdown изглед на журнала за преглед на екипа.",
      "package.json": "Добавена npm команда `log:generate` за лесно обновяване.",
      "scripts/generateChangeLog.js": "Нов скрипт, който вика `git show --numstat` и създава таблица с промените."
    }
  },
  {
    "commit": "d63b9c878793f44ba9f70a7ff65dc18ea33ab093",
    "timestamp": "2025-09-17T23:32:47Z",
    "request": "Покрий процеса за генериране на план с тест за успешния сценарий и логовете.",
    "summary": "Добавен е базов unit тест за processSingleUserPlan с пълна проверка на логовете.",
    "reason": "Искаме регресионна защита, че ключовите стъпки на плановия процес се проследяват коректно.",
    "notes": {
      "tests/processSingleUserPlan.spec.js": "Нов тест, който моква fetch и проверява, че логът съдържа стъпки като 'Старт на генериране'."
    }
  },
  {
    "commit": "14f503ab083ca1cb5c2c1704c4b0b1dc44fc6504",
    "timestamp": "2025-09-17T23:46:43Z",
    "request": "Буферирай логовете за обработка на план и регистрирай грешките при запис.",
    "summary": "Въведен е буферен механизъм за плановите логове и нови тестови сценарии.",
    "reason": "Трябва да предотвратим загубата на логове при KV грешки и да намалим броя записи.",
    "notes": {
      "tests/processSingleUserPlan.spec.js": "Рефакторирани помощни функции и добавени сценарии за буфериране (пример: flushLog('start')).",
      "worker.js": "Добавено `logBuffer` с условно `flushLog` и записване на грешки при KV откази."
    }
  },
  {
    "commit": "eeaa35918fe2b692180f0062401e263bc20b47bd",
    "timestamp": "2025-09-18T16:41:42Z",
    "request": "Оптимизирай handleLogRequest, така че да пропуска неизменени дневници и да маркира обновяванията.",
    "summary": "Оптимизирано е записването на дневници с проверка за промени и нов флаг updated.",
    "reason": "Нужно е да ограничим излишните KV операции и да пазим по-точен статус за клиента.",
    "notes": {
      "worker.js": "Добавена проверка `payloadChanged` и условни `put` операции за дневник и current_status.",
      "tests/handleLogRequest.spec.js": "Нов тест, който доказва, че второ идентично искане не записва повторно (пример: expect(...updated).toBe(false))."
    }
  },
  {
    "commit": "de4a2b89147b6f2545fd89be84ab881dfad6948c",
    "timestamp": "2025-09-18T17:04:42Z",
    "request": "Направи AI извикванията за генериране на план mockable, за да стабилизираме тестовете.",
    "summary": "Позволена е смяна на callModel през setCallModelImplementation и обновени тестове.",
    "reason": "Трябва да контролираме отговорите на модела в unit тестовете и да избегнем реални заявки.",
    "notes": {
      "tests/processSingleUserPlan.spec.js": "Споделен `callModelMock` и предварително дефинирани отговори за различни сценарии.",
      "worker.js": "Въведен `callModelRef.current` и нов `setCallModelImplementation` за инжектиране при тест (пример: callModelRef.current(...))."
    }
  }
]
