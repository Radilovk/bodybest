// ==========================================================================
// üöÄ MyBody.Best - –û–ë–ï–î–ò–ù–ï–ù JAVASCRIPT –§–ê–ô–õ V1.0
// ==========================================================================
// –¢–æ–∑–∏ —Ñ–∞–π–ª –∫–æ–º–±–∏–Ω–∏—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
// —Å –Ω–æ–≤–∞—Ç–∞, –º–æ–¥—É–ª–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∫–∞—Ç–æ –∑–∞–ø–∞–∑–≤–∞
// —Ü—è–ª–∞—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç.
// ==========================================================================

// --- –ß–ê–°–¢ 1: –ò–ù–¢–ï–ì–†–ò–†–ê–ù–ò –ú–û–î–£–õ–ò (–æ—Ç –æ—Ç–¥–µ–ª–Ω–∏—Ç–µ JS —Ñ–∞–π–ª–æ–≤–µ) ---

import { toggleTheme, initializeTheme } from './js/uiHandlers.js';

/**
 * @description –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –≥–ª–æ–±–∞–ª–Ω–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ (–æ—Ç config.js)
 */
const Config = {
    isLocalDevelopment: window.location.hostname === 'localhost' ||
                        window.location.hostname === '127.0.0.1' ||
                        window.location.hostname.includes('replit') ||
                        window.location.hostname.includes('preview'),
    
    get workerBaseUrl() {
        return this.isLocalDevelopment ? '' : 'https://openapichatbot.radilov-k.workers.dev';
    },

    get apiEndpoints() {
        return {
            login: `${this.workerBaseUrl}/api/login`,
            register: `${this.workerBaseUrl}/api/register`,
            requestPasswordReset: `${this.workerBaseUrl}/api/requestPasswordReset`,
            // ... –¥–æ–±–∞–≤–µ—Ç–µ –¥—Ä—É–≥–∏ endpoints –ø—Ä–∏ –Ω—É–∂–¥–∞
        };
    }
};

// URL –Ω–∞ —Ç–∞–±–ª–æ—Ç–æ —Å–ª–µ–¥ —É—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥
const dashboardUrl = 'code.html';

/**
 * @description –£–Ω–∏–≤–µ—Ä—Å–∞–ª–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ —Å—ä–æ–±—â–µ–Ω–∏—è (–æ—Ç messageUtils.js)
 */
const MessageUtils = {
    showMessage(element, text, isError = true) {
        if (!element) return;
        element.textContent = text;
        element.className = `message ${isError ? 'error' : 'success'}`;
        element.style.display = 'block';
        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
    },
    hideMessage(element) {
        if (!element) return;
        element.textContent = '';
        element.style.display = 'none';
        element.className = 'message';
    }
};

/**
 * @description –õ–æ–≥–∏–∫–∞ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä (–æ—Ç stepProgress.js)
 * –ê–Ω–∏–º–∞—Ü–∏—è—Ç–∞ –µ –≤–≥—Ä–∞–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ –∑–∞ –ø—Ä–æ—Å—Ç–æ—Ç–∞.
 */
const StepProgress = {
    update(barEl, currentStep, totalSteps) {
        if (barEl && totalSteps > 0) {
            const percent = Math.round((Math.max(0, currentStep) / totalSteps) * 100);
            barEl.style.width = `${percent}%`;
        }
    }
};


/**
 * @description –õ–æ–≥–∏–∫–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–æ—Ç register.js)
 */
function setupRegistration(formSelector, messageElSelector) {
    const form = document.querySelector(formSelector);
    const messageEl = document.querySelector(messageElSelector);
    if (!form || !messageEl) {
        console.error('setupRegistration: elements not found');
        return;
    }

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        MessageUtils.hideMessage(messageEl);
        
        const emailInput = form.querySelector('input[type="email"]');
        const [passInput, confirmInput] = form.querySelectorAll('input[type="password"]');
        const submitBtn = form.querySelector('button[type="submit"]');

        if (!emailInput || !passInput || !confirmInput || !submitBtn) {
            console.error('setupRegistration: missing form fields');
            return;
        }

        const email = emailInput.value.trim().toLowerCase();
        const password = passInput.value;
        const confirmPassword = confirmInput.value;
        const btnText = submitBtn.textContent;

        const resetBtn = () => {
            submitBtn.disabled = false;
            submitBtn.textContent = btnText;
        };
        
        const showErr = (msg) => {
            MessageUtils.showMessage(messageEl, msg, true);
            resetBtn();
        };

        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) return showErr('–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å.');
        if (password.length < 8) return showErr('–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 8 –∑–Ω–∞–∫–∞.');
        if (password !== confirmPassword) return showErr('–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç.');
        
        submitBtn.disabled = true;
        submitBtn.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';

        try {
            const res = await fetch(Config.apiEndpoints.register, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password, confirm_password: confirmPassword })
            });
            const data = await res.json();
            if (!res.ok || !data.success) throw new Error(data.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.');
            
            MessageUtils.showMessage(messageEl, data.message || '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –ú–æ–ª—è, –≤–ª–µ–∑—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏.', false);
            form.dispatchEvent(new CustomEvent('registrationSuccess', { detail: { ...data, email } }));
            form.reset();

        } catch (err) {
            console.error('Registration failed:', err);
            const msg = err instanceof TypeError ? '–ù–µ—É—Å–ø–µ—à–Ω–∞ –≤—Ä—ä–∑–∫–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞—Ç–∞.' : err.message;
            showErr(msg);
            form.dispatchEvent(new CustomEvent('registrationError', { detail: err }));
        } finally {
            resetBtn();
        }
    });
}


// --- –ß–ê–°–¢ 2: –û–°–ù–û–í–ù–ê –õ–û–ì–ò–ö–ê –ù–ê –°–¢–†–ê–ù–ò–¶–ê–¢–ê ---

document.addEventListener('DOMContentLoaded', () => {

    // --- ‚öôÔ∏è –°–ï–õ–ï–ö–¢–û–†–ò –ù–ê –ï–õ–ï–ú–ï–ù–¢–ò ---
    const header = document.getElementById('header');
    const body = document.body;
    const nav = document.getElementById('nav');
    const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
    if (!mobileMenuBtn || !nav) {
        console.warn('script.js: –ª–∏–ø—Å–≤–∞ –µ–ª–µ–º–µ–Ω—Ç –∑–∞ –º–æ–±–∏–ª–Ω–æ –º–µ–Ω—é', {
            btnExists: !!mobileMenuBtn,
            navExists: !!nav
        });
    }
    const themeToggleBtn = document.getElementById('theme-toggle');
    
    // –ú–æ–¥–∞–ª–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü
    const modalContainer = document.getElementById('auth-modal');
    const openModalBtns = document.querySelectorAll('.open-modal-btn');
    const closeModalBtn = document.querySelector('.close-modal');
    
    // –§–æ—Ä–º–∏ –≤ –º–æ–¥–∞–ª–∞
    const loginSection = document.getElementById('login-section');
    const registerSection = document.getElementById('register-section');
    const showRegisterLink = document.getElementById('show-register');
    const showLoginLink = document.getElementById('show-login');
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const loginMessage = document.getElementById('login-message');
    const registerMessage = document.getElementById('register-message');
    const registerPasswordInput = document.getElementById('register-password');
    const strengthEl = document.getElementById('register-strength');
    const regProgressBar = document.getElementById('registerProgressBar');
    const regInputs = Array.from(registerForm.querySelectorAll('input'));
    const totalRegSteps = regInputs.length;


    // --- üìú –õ–û–ì–ò–ö–ê –û–¢ –û–†–ò–ì–ò–ù–ê–õ–ù–ò–Ø –õ–ï–ù–î–ò–ù–ì (ai_studio_code.js) ---

    // 1. –ü—Ä–µ–º–∞—Ö–Ω–∞—Ç —Å–∫—Ä–æ–ª —Å–ª—É—à–∞—Ç–µ–ª, –¥–æ–±–∞–≤—è–º–µ –∫–ª–∞—Å–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ HTML

    // 2. –ú–æ–±–∏–ª–Ω–æ –º–µ–Ω—é
    if (mobileMenuBtn && nav) {
        const applyHeaderColor = () => {
            const bg = header ? getComputedStyle(header).backgroundColor : '';
            if (bg) nav.style.backgroundColor = bg;
        };
        const closeNav = () => {
            body.classList.remove('nav-open');
            mobileMenuBtn.setAttribute('aria-expanded', 'false');
        };
        const toggleNav = () => {
            applyHeaderColor();
            const open = body.classList.toggle('nav-open');
            mobileMenuBtn.setAttribute('aria-expanded', open);
        };
        mobileMenuBtn.addEventListener('click', toggleNav);
        document.addEventListener('click', (e) => {
            if (
                body.classList.contains('nav-open') &&
                !nav.contains(e.target) &&
                !mobileMenuBtn.contains(e.target)
            ) {
                closeNav();
            }
        });
        nav.addEventListener('click', (e) => { if (e.target === nav) closeNav(); });
        nav.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', closeNav);
        });
    }

    // 3. –ü–ª–∞–≤–Ω–æ –ø—Ä–µ–≤—ä—Ä—Ç–∞–Ω–µ
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            if (targetId.length > 1) {
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    const offset = header ? header.offsetHeight : 70;
                    const offsetTop = targetElement.offsetTop - offset;
                    window.scrollTo({ top: offsetTop, behavior: 'smooth' });
                }
            }
        });
    });

    // 4. –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª
    const revealElements = document.querySelectorAll('.reveal');
    if (revealElements.length > 0) {
        const revealObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) entry.target.classList.add('visible');
            });
        }, { threshold: 0.1 });
        revealElements.forEach(el => revealObserver.observe(el));
    }
    
    // 5. IDENTITY SLIDER –õ–û–ì–ò–ö–ê
    const sliderItems = document.querySelectorAll('.slider-item');
    if (sliderItems.length > 0) {
        let currentSlide = 0;
        const showSlide = (index) => {
            sliderItems.forEach(item => item.classList.remove('active'));
            sliderItems[index].classList.add('active');
        }
        const nextSlide = () => {
            currentSlide = (currentSlide + 1) % sliderItems.length;
            showSlide(currentSlide);
        }
        setInterval(nextSlide, 3000);
    }
    
    // 6. –õ–û–ì–ò–ö–ê –ó–ê –°–ì–™–í–ê–ï–ú–ò –ï–õ–ï–ú–ï–ù–¢–ò (FEATURES/PROGRAMS)
    const collapsibleItems = document.querySelectorAll('.collapsible-item');
    collapsibleItems.forEach(item => {
        const trigger = item.querySelector('.collapsible-trigger');
        if(trigger) {
            trigger.addEventListener('click', () => {
                item.classList.toggle('active');
            });
        }
    });
    
    // 7. –õ–û–ì–ò–ö–ê –ó–ê –¢–ê–ë–û–í–ï (PROGRAMS)
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    if (tabButtons.length > 0 && tabContents.length > 0) {
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.getAttribute('data-tab');
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                button.classList.add('active');
                const activeContent = document.getElementById('tab-' + tabId);
                if (activeContent) activeContent.classList.add('active');
            });
        });
    }

    // 8. –ê–∫—Ç–∏–≤–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    if (sections.length > 0 && navLinks.length > 0) {
        const navObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if(entry.isIntersecting){
                    const id = entry.target.getAttribute('id');
                    navLinks.forEach(link => {
                        link.classList.remove('active');
                        if(link.getAttribute('href') === '#' + id) link.classList.add('active');
                    });
                }
            });
        }, { rootMargin: '-30% 0px -70% 0px' });
        sections.forEach(section => navObserver.observe(section));
    }

    // --- üí° –ù–û–í–ê –õ–û–ì–ò–ö–ê –ó–ê –ú–û–î–ê–õ –ò –§–û–†–ú–ò ---

    // 9. –ü—Ä–µ–≤–∫–ª—é—á–≤–∞—Ç–µ–ª –∑–∞ —Ç–µ–º–∞ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞
    if (themeToggleBtn) {
        const icons = {
            light: '<i class="bi bi-moon-stars-fill"></i>',
            dark: '<i class="bi bi-palette-fill"></i>',
            vivid: '<i class="bi bi-brightness-high-fill"></i>'
        };

        const themeOrder = ['light', 'dark', 'vivid'];
        const getCurrent = () =>
            document.body.classList.contains('dark-theme')
                ? 'dark'
                : document.body.classList.contains('vivid-theme')
                ? 'vivid'
                : 'light';

        const updateIcon = () => {
            const current = getCurrent();
            const next = themeOrder[(themeOrder.indexOf(current) + 1) % themeOrder.length];
            themeToggleBtn.innerHTML = icons[next];
        };

        themeToggleBtn.addEventListener('click', () => {
            toggleTheme();
            updateIcon();
        });

        initializeTheme();
        updateIcon();
    }

    // 10. –õ–æ–≥–∏–∫–∞ –∑–∞ –º–æ–¥–∞–ª–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü
    if (modalContainer) {
        const openModal = () => modalContainer.classList.add('active');
        const closeModal = () => modalContainer.classList.remove('active');
        
        openModalBtns.forEach(btn => btn.addEventListener('click', (e) => {
            e.preventDefault();
            openModal();
        }));
        
        if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
        modalContainer.addEventListener('click', (e) => { if (e.target === modalContainer) closeModal(); });
        document.addEventListener('keydown', (e) => { if (e.key === "Escape" && modalContainer.classList.contains('active')) closeModal(); });
        
        const switchForms = (show, hide) => {
            hide.classList.add('hidden');
            show.classList.remove('hidden');
            show.classList.add('fade-in');
            hide.classList.remove('fade-in');
            document.querySelectorAll('.message').forEach(m => MessageUtils.hideMessage(m));
        };

        if (showRegisterLink && registerSection && loginSection) {
            showRegisterLink.addEventListener('click', () => {
                switchForms(registerSection, loginSection);
                registerForm.reset();
                StepProgress.update(regProgressBar, 0, totalRegSteps);
            });
        }
        if (showLoginLink && loginSection && registerSection) {
            showLoginLink.addEventListener('click', () => {
                switchForms(loginSection, registerSection);
                loginForm.reset();
            });
        }
    }
    
    // 11. –õ–æ–≥–∏–∫–∞ –∑–∞ —Ñ–æ—Ä–º–∏—Ç–µ –≤ –º–æ–¥–∞–ª–∞
    document.querySelectorAll('.toggle-pass').forEach(btn => {
        btn.addEventListener('click', function() {
            const input = btn.closest('.password-group').querySelector('input');
            const isPass = input.type === 'password';
            input.type = isPass ? 'text' : 'password';
            btn.innerHTML = isPass ? '<i class="bi bi-eye-slash"></i>' : '<i class="bi bi-eye"></i>';
        });
    });

    // 12. –õ–æ–≥–∏–∫–∞ –∑–∞ —Å–∏–ª–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
    if (registerPasswordInput && strengthEl) {
        registerPasswordInput.addEventListener('input', () => {
            const val = registerPasswordInput.value;
            let score = 0;
            if (val.length >= 8) score++; if (/[A-Z]/.test(val)) score++; if (/[0-9]/.test(val)) score++; if (/[^A-Za-z0-9]/.test(val)) score++;
            let text = '', cls = '';
            if (val.length > 0) {
                if (score <= 1) { text = '–°–ª–∞–±–∞'; cls = 'strength-weak'; }
                else if (score <= 3) { text = '–°—Ä–µ–¥–Ω–∞'; cls = 'strength-medium'; }
                else { text = '–°–∏–ª–Ω–∞'; cls = 'strength-strong'; }
            }
            strengthEl.textContent = text;
            strengthEl.className = 'password-strength ' + cls;
        });
    }

    if(regProgressBar) {
        const refreshRegProgress = () => {
            const filled = regInputs.filter(el => el.value.trim() !== '').length;
            StepProgress.update(regProgressBar, filled, totalRegSteps);
        };
        regInputs.forEach(inp => inp.addEventListener('input', refreshRegProgress));
        registerForm.addEventListener('reset', () => StepProgress.update(regProgressBar, 0, totalRegSteps));
        refreshRegProgress(); // Initial check
    }

    // 13. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å—ä–±–∏—Ç–∏—è –Ω–∞ —Ñ–æ—Ä–º–∏—Ç–µ (Login & Register)
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            MessageUtils.hideMessage(loginMessage);

            const loginButton = loginForm.querySelector('button[type="submit"]');
            const originalButtonText = loginButton.textContent;
            loginButton.disabled = true;
            loginButton.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';

            const email = loginForm.querySelector('#login-email').value.trim().toLowerCase();
            const password = loginForm.querySelector('#login-password').value;

            if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                 MessageUtils.showMessage(loginMessage, '–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å.', true);
                 loginButton.disabled = false;
                 loginButton.textContent = originalButtonText;
                 return;
            }

            try {
                const response = await fetch(Config.apiEndpoints.login, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });
                const data = await response.json();
                if (!response.ok || !data.success) {
                    throw new Error(data.message || `–ì—Ä–µ—à–∫–∞ ${response.status}. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.`);
                }
                
                sessionStorage.setItem('userId', data.userId);
                sessionStorage.setItem('userEmail', email);
                sessionStorage.setItem('planStatus', data.planStatus || 'unknown');
                
                // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –∫—ä–º —Ç–∞–±–ª–æ—Ç–æ (dashboard), –∫–æ–µ—Ç–æ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –¥—Ä—É–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
                // –í —Ç–æ–∑–∏ —Å–ª—É—á–∞–π, –∑–∞ —Ü–µ–ª–∏—Ç–µ –Ω–∞ –¥–µ–º–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–≤–∞–º–µ —É—Å–ø–µ—Ö.
                MessageUtils.showMessage(loginMessage, "–£—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥! –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ...", false);
                setTimeout(() => {
                    window.location.href = dashboardUrl;
                }, 1500);

            } catch (error) {
                console.error('Login failed:', error);
                const msg = error instanceof TypeError ? '–ù–µ—É—Å–ø–µ—à–Ω–∞ –≤—Ä—ä–∑–∫–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞—Ç–∞.' : error.message;
                MessageUtils.showMessage(loginMessage, msg, true);
                loginButton.disabled = false;
                loginButton.textContent = originalButtonText;
            }
        });
    }

    if (registerForm) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –ª–æ–≥–∏–∫–∞—Ç–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        setupRegistration("#register-form", "#register-message");

        // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–µ–≤–∫–ª—é—á–≤–∞–º–µ –∫—ä–º —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –≤—Ö–æ–¥
        registerForm.addEventListener("registrationSuccess", () => {
            setTimeout(() => {
                if (showLoginLink) showLoginLink.click();
                MessageUtils.hideMessage(registerMessage);
            }, 2500);
        });
    }
});